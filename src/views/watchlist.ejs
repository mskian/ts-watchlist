<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Movie & Series Watchlist</title>
  <meta name="description" content="Simple and Minimal Web app for Manage Movie & Series Watchlist.">
  <link rel="preconnect" href="https://cdnjs.cloudflare.com">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/1.0.3/css/bulma.min.css" integrity="sha512-4EnjWdm80dyWrJ7rh/tlhNt6fJL52dSDSHNEqfdVmBLpJLPrRYnFa+Kn4ZZL+FRkDL5/7lAXuHylzJkpzkSM2A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Geist+Mono:wght@100..900&display=swap" rel="stylesheet">
<style>
html,
body {
  min-height: 100vh;
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  font-family: "Geist Mono", serif;
  font-weight: 500;
  word-wrap: break-word;
}
body {
  background-color: #dff0fa;
  color: #121212;
  font-family: 16px;
  padding-bottom: 20px;
}
.container {
  font-family: "Geist Mono", serif;
  max-width: 900px;
  margin: auto;
  padding: 20px;
}

h1.title {
  color: #181116;
  text-align: center;
  font-family: "Geist Mono", serif;
  font-size: 23px;
  border-bottom: 2px solid #f58235;
  padding-bottom: 10px;
  margin-bottom: 30px;
}

.notification {
  font-family: "Geist Mono", serif;
  background-color: #44475a;
  color: #f8f8f2;
  border-radius: 5px;
  margin-bottom: 20px;
}
.button.is-primary {
  background-color: #50fa7b;
  border: none;
  color: #282a36;
}

.button.is-link {
  background-color: #bd93f9;
  border: none;
  color: #282a36;
}

.button.is-danger {
  background-color: #ff5555;
  border: none;
  color: #282a36;
}

.pagination {
  font-family: "Geist Mono", serif;
  justify-content: center;
  margin-top: 20px;
}

.pagination-previous,
.pagination-next {
  background-color: #3f071e;
  color: #f8f8f2;
}

.pagination-previous.is-disabled,
.pagination-next.is-disabled {
  background-color: #3f071e;
  color: #8b8b8b;
}

.textarea,
.input,
.select {
  font-family: "Geist Mono", serif;
  border: none;
}

.input:focus,
.select:focus,
.textarea:focus {
  outline: none;
  border: 1px solid #50fa7b;
}

.notification.is-success {
  background-color: #50fa7b;
  color: #282a36;
}

.notification.is-danger {
  background-color: #ff5555;
  color: #282a36;
}

.has-text-centered p {
  font-family: "Geist Mono", serif;
  font-size: 1rem;
  color: #f8f8f2;
  word-wrap: break-word;
}
p {
  font-family: "Geist Mono", serif;
  font-size: 1rem;
  color: #ece250;
  word-wrap: break-word;
}
.box {
  position: relative;
  background: #2C3A47;
  color: #fade42;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  font-family: "Geist Mono", serif;
  letter-spacing: .04em;
}
.navbar-item {
    font-family: "Geist Mono", serif;
    text-transform: uppercase;
}
#snackbar-container {
  position: fixed;
  bottom: 20px;
  left: 50%;
  font-family: "Geist Mono", serif;
  transform: translateX(-50%);
  z-index: 1000;
  width: 90%;
  max-width: 500px;
  word-wrap: break-word;
}
.snackbar {
  font-family: "Geist Mono", serif;
  margin-bottom: 10px;
  animation: fade-in 0.3s ease-out;
}
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
.toggle-switch {
  display: none;
}

.toggle-label {
  display: inline-block;
  width: 35px;
  height: 18px;
  position: relative;
  cursor: pointer;
  background-color: #ccc;
  border-radius: 18px;
  transition: background-color 0.3s ease;
}

.toggle-label .slider {
  position: absolute;
  width: 14px;
  height: 14px;
  background-color: #fff;
  border-radius: 50%;
  top: 2px;
  left: 2px;
  transition: transform 0.3s ease;
}

.toggle-switch:checked + .toggle-label {
  background-color: #50fa7b;
}

.toggle-switch:checked + .toggle-label .slider {
  transform: translateX(17px);
}
</style>
</head>
<body>
<nav class="navbar is-primary">
    <div class="navbar-brand">
        <a class="navbar-item" href="#">
            <strong>Watchlist</strong>
        </a>
        <a role="button" class="navbar-burger burger" aria-label="menu" aria-expanded="false" data-target="navbarMenu">
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
            <span aria-hidden="true"></span>
        </a>
    </div>
    <div id="navbarMenu" class="navbar-menu">
        <div class="navbar-end">
            <a class="navbar-item" href="/">Home</a>
            <a class="navbar-item" href="/dashboard">Add List</a>
            <a class="navbar-item" href="/logout">Log out</a>
        </div>
    </div>
</nav>
  <section class="section">
  <div class="container">
    <h1 class="title mb-6">My Watchlist</h1>
    <div class="mb-4">
      <% if (items.length === 0) { %>
        <p>No items in the watchlist!</p>
      <% } else { %>
          <% items.forEach(item => { %>
            <div class="box">
                <p class="mb-5 mt-5">
                  üé¨ Name: <%= item.name %><br>
                  üì∫ It's a: <%= item.its === 'movie' ? 'Movie' : item.its === 'tv-show' ? 'TV Show' : 'Unknown' %><br>
                  ‚úÖ <span id="status-<%= item.id %>">Status: <%= item.completed === 'completed' ? 'Completed' : 'Not Completed' %></span><br>
                  üçø <%= item.notes %>            
                </p>
                <div class="field mb-4">
                  <p class="mb-2">Change Status:</p>
                  <form style="display:inline;" onsubmit="toggleCompletion(event, '<%= item.id %>')">
                    <input 
                      type="checkbox" 
                      id="toggle-<%= item.id %>" 
                      name="completed" 
                      class="toggle-switch"
                      <%= item.completed === 'completed' ? 'checked' : '' %>
                    >
                    <label for="toggle-<%= item.id %>" class="toggle-label">
                      <span class="slider"></span>
                    </label>
                  </form>                                      
                </div>
            </div>
          <% }) %>
      <% } %>
    </div>
    <div class="pagination is-centered">
      <% if (currentPage > 1) { %>
        <a class="pagination-previous" href="/?page=<%= currentPage - 1 %>">Previous</a>
      <% } else { %>
        <a class="pagination-previous is-disabled">Previous</a>
      <% } %>
      <% if (currentPage < totalPages) { %>
        <a class="pagination-next" href="/?page=<%= currentPage + 1 %>">Next</a>
      <% } else { %>
        <a class="pagination-next is-disabled">Next</a>
      <% } %>
    </div>
    <div class="has-text-centered">
      <p>Page <%= currentPage %> of <%= totalPages %></p>
    </div>
    <% if (errorMessage) { %>
      <div class="notification is-danger">
        <button class="delete"></button>
        <%= errorMessage %>
      </div>
    <% } %>
    <% if (successMessage) { %>
      <div class="notification is-success">
        <button class="delete"></button>
        <%= successMessage %>
      </div>
    <% } %>
<div id="snackbar-container" class="is-hidden"></div>
</div>
</section>
<script>
  document.addEventListener('DOMContentLoaded', () => {
      const navbarBurger = document.querySelector('.navbar-burger');
      const navbarMenu = document.querySelector('#navbarMenu');

      if (navbarBurger) {
          navbarBurger.addEventListener('click', () => {
              navbarBurger.classList.toggle('is-active');
              navbarMenu.classList.toggle('is-active');
          });
      }
  });
document.addEventListener('change', (event) => {
  if (event.target.classList.contains('toggle-switch')) {
    const id = event.target.id.split('-')[1];
    toggleCompletion(event, id);
  }
});
async function toggleCompletion(event, id) {
  event.preventDefault();

  try {
    const checkbox = event.target;
    const status = checkbox.checked ? 'completed' : 'not-completed';

    const response = await fetch(`/toggle/${id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ completed: status }),
    });

    const result = await response.json();

    showSnackbar(result.message, result.success ? 'is-success' : 'is-danger');
    if (result.success) {
    const statusElement = document.querySelector(`#status-${id}`);
      if (statusElement) {
        statusElement.textContent = status === 'completed' ? 'Status: Completed' : 'Status: Not Completed';
      }
    } else {
      checkbox.checked = !checkbox.checked;
    }
  } catch (error) {
    console.error('Error toggling completion:', error);
    showSnackbar('An error occurred while updating the status. Please try again.', 'is-danger');
  }
}

/**
 * Displays a snackbar notification.
 * @param {string} message - The message to display.
 * @param {string} type - The Bulma color class (e.g., 'is-success', 'is-danger').
 */
function showSnackbar(message, type) {
  const container = document.getElementById('snackbar-container');
  const snackbar = document.createElement('div');
  snackbar.className = `notification ${type} is-light snackbar`;
  snackbar.textContent = message;
  const closeButton = document.createElement('button');
  closeButton.className = 'delete';
  closeButton.addEventListener('click', () => snackbar.remove());
  snackbar.prepend(closeButton);
  container.appendChild(snackbar);
  container.classList.remove('is-hidden');
  setTimeout(() => {
    snackbar.remove();
    if (container.childElementCount === 0) {
      container.classList.add('is-hidden');
    }
  }, 3000);
}
</script>
</body>
</html>